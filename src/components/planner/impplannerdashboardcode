import React, {useState,useEffect} from 'react';
import Link from 'react-router-dom/Link';
import { isAuthenticated } from '../../auth';
import { getBranch } from '../../branch/helper/api';
import Dashboard from '../../core/Dashboard';
import { getGym } from '../../gym/helper/api';
import { checkPlannerStatus, createPlanner, deletePlanner, getAllPlanner } from '../helper/api';
import { useHistory } from "react-router-dom";
import ArrowDown from '../../assets/arrow-down.svg';
import Cross from "../../assets/cross.svg";
import _ from 'lodash';
import FilterIcon from "../../assets/filter.svg";
import SwapIcon from "../../assets/swap.svg";
import ArrowUp from "../../assets/arrow-sign.svg";
import ReactPlayer from 'react-player';
import ArrowLeft from "../../assets/arrow-left.svg";
import ArrowRight from "../../assets/arrow-right.svg";
import BlockIcon from "../../assets/block.svg";
import UpdateIcon from "../../assets/edit.svg";
import DownloadIcon from "../../assets/download.svg";


const PlannerDashBoard = (props) => {

    // Hooks call for getting Dashboard Info 
    const ItemId = props.match.params.itemId;
    // User Authentication
    const {user,token} = isAuthenticated();
    const history=useHistory();
    const [Branch,setBranch]=useState({
        branchName:"",
        branchId:"",
        branch_active:false,
        totaladminusers:0,
        totalmembers:0,
        phone:"",
        email:"",
        gymId:"",
        gymName:""
    });
    const {branchName,totaladminusers,totalmembers,branchId,phone,email,gymId,branch_active,gymName}=Branch;
    const [currentExId,setcurrentExId]=useState(null);
    const [Planners,setPlanners]=useState([]);
    const [dialogform,setdialogform]=useState({
        formtitle:"Create Planner",
        formrole:0 //0 create 1 update 2 block
    });
    const {formtitle,formrole}=dialogform;
    const [Planner,setPlanner]=useState({
        planner_name:"",
        level:"",
        active:false
    });
    const {planner_name,level,active}=Planner;
    const [isOpen,setisOpen]=useState(false);
    const [exerciseLevel,setexerciseLevel]=useState([
        "Beginner  1",
        "Beginner  2",
        "Intermediate 1",
        "Advanced",
        "Pro"
    ])

    const [selectedUnit, setSelectedUnit] = useState("Distance");
    const distance = "Distance";
    const time = "Time";
    const number = "Number";
    const weight = "Weight";
    const [currentVideo, setCurrentVideo] = useState("https://www.youtube.com/watch?v=iw_MFkAnSGA");
    const [currentContent, setCurrentContent] = useState("Main Exercise Title");
    const [selectedContentList, setSelectedContentList] = useState([]);
    const [instafitContentList, setInstafitContentList] =  useState([
        {
            id: "ins-content-1",
            contentName: "Instafit-Content-1",
        },
        {
            id: "ins-content-2",
            contentName: "Instafit-Content-2",
        }
    ])




    //handler functions
    const handleChange=name=>event=>{
        setPlanner({...Planner,[name]:event.target.value});
    }
    const handleOpen=()=>{
        setisOpen(true);
    }
    const handleClose=()=>{
        setisOpen(false);
    }

    const toggleSelectedPlanner = () => {
        if(document.getElementById("select-planner").style.display == "none"){
            document.getElementById("select-planner").style.display = "block";
            document.getElementById("icon-planner").style.transform = "rotate(-180deg)";

            document.getElementById("workout-planner").addEventListener("click", function(){
                let plannerType = document.getElementById("workout-planner").innerHTML; 
                document.getElementById("selected-plannerType").innerHTML = plannerType;    
                document.getElementById("select-planner").style.display = "none"; 
                document.getElementById("icon-planner").style.transform = "rotate(0deg)";
                document.getElementById("workout-plannerList").style.display = "table";
                document.getElementById("fitness-plannerList").style.display = "none";
            })

            document.getElementById("fitness-planner").addEventListener("click", function(){
                let plannerType = document.getElementById("fitness-planner").innerHTML; 
                document.getElementById("selected-plannerType").innerHTML = plannerType;
                document.getElementById("select-planner").style.display = "none"; 
                document.getElementById("icon-planner").style.transform = "rotate(0deg)";
                document.getElementById("workout-plannerList").style.display = "none";
                document.getElementById("fitness-plannerList").style.display = "table";       
            })

        }else{
            document.getElementById("select-planner").style.display = "none";
            document.getElementById("icon-planner").style.transform = "rotate(0deg)";
        }
    }

    const toggleFilter = () => {
        if(document.getElementById("filter-container-toggle").style.display == "none"){
            document.getElementById("filter-container-toggle").style.display = "block";
        }else{
            document.getElementById("filter-container-toggle").style.display = "none";
        }
    }

    const toggleSortingItem = (event) => {
        event.preventDefault();
        let currentSortingItem = event.target.id.split('-')[1];
        if(document.getElementById("list-" + currentSortingItem).style.display == "none"){
            document.getElementById("icon-" + currentSortingItem).style.transform = "rotate(-180deg)";
            document.getElementById("list-" + currentSortingItem).style.display = "block";

            document.getElementById("itemId-" + currentSortingItem).addEventListener("click", function(event) {
                let currentSelectedItem = event.target.innerHTML;
                document.getElementById("text-" + currentSortingItem).innerHTML = currentSelectedItem;
                document.getElementById("icon-" + currentSortingItem).style.transform = "rotate(0deg)";
                document.getElementById("list-" + currentSortingItem).style.display = "none";
            })
        }else{
            document.getElementById("icon-" + currentSortingItem).style.transform = "rotate(0deg)";
            document.getElementById("list-" + currentSortingItem).style.display = "none";
        }
    }

    const toggleFitnessPlannerView = (currentTarget) => {
        let currentTargetValue = currentTarget.split('-')[1];
        if(document.getElementById("view-" + currentTargetValue).style.display == "none"){
            document.getElementById("view-" + currentTargetValue).style.display = "block";
        }else{
            document.getElementById("view-" + currentTargetValue).style.display = "none";
        }
    }

    const toggleFitnessPlannerCreate = (event) => {
        let createFitnessPlanner = event.split('-')[1];
        if(document.getElementById("add-" + createFitnessPlanner).style.display == "none"){
            document.getElementById("add-" + createFitnessPlanner).style.display = "block";
        }else{
            document.getElementById("add-" + createFitnessPlanner).style.display = "none";
        }
        // alert(createFitnessPlanner);
    }

    const togglePlannerAction = (currentPlanner) => {
        let currentPlannerName = currentPlanner.split('-')[1];
        if(document.getElementById('action-' + currentPlannerName).style.display == "none"){
            document.getElementById('action-' + currentPlannerName).style.display = "block";
        }else{
            document.getElementById('action-' + currentPlannerName).style.display = "none";
        }
        // alert(currentPlannerName);
    }

    const toggleContentList = (event) => {
        let currentContentList  =  event.target.id.split('-')[1];
        let instafit = currentContentList.includes('instafit');
        let gym = currentContentList.includes('gym');
        let my = currentContentList.includes('my');

        if(instafit && !gym && !my){
            if(document.getElementById('contentList-instafit').style.display == "none"){
                document.getElementById('contentList-instafit').style.display = "block";
                document.getElementById('icon-instafit').style.transform = "rotate(180deg)";
                document.getElementById('contentList-gym').style.display = "none";
                document.getElementById('contentList-my').style.display = "none";
            }else{
                document.getElementById('contentList-instafit').style.display = "none";
                document.getElementById('icon-instafit').style.transform = "rotate(0deg)";
                document.getElementById('contentList-gym').style.display = "block";
                document.getElementById('contentList-my').style.display = "none";
            }
        }

        if(gym && !instafit && !my){
            if(document.getElementById('contentList-gym').style.display == "none"){
                document.getElementById('contentList-gym').style.display = "block";
                document.getElementById('iconList-gym').style.transform = "rotate(180deg)";
                document.getElementById('contentList-instafit').style.display = "none";
                document.getElementById('contentList-my').style.display = "none";
            }else{
                document.getElementById('contentList-instafit').style.display = "none";
                document.getElementById('iconList-gym').style.transform = "rotate(0deg)";
                document.getElementById('contentList-gym').style.display = "none";
                document.getElementById('contentList-my').style.display = "block";
            }
        }

        if(my && !instafit && !gym){
            if(document.getElementById('contentList-my').style.display == "none"){
                document.getElementById('contentList-my').style.display = "block";
                document.getElementById('icon-my').style.transform = "rotate(180deg)";
                document.getElementById('contentList-gym').style.display = "none";
                document.getElementById('contentList-instafit').style.display = "none";
            }else{
                document.getElementById('contentList-my').style.display = "none";
                document.getElementById('icon-my').style.transform = "rotate(0deg)";
                document.getElementById('contentList-gym').style.display = "none";
                document.getElementById('contentList-instafit').style.display = "block";
            }
        }
    }

    const handleToggle = (data) => event => {
        event.preventDefault();
        let currentIndex = selectedContentList.findIndex(doc => doc.id == data.id);
        let newChecked = [...selectedContentList];
        if(currentIndex == -1){
            data['unit'] = "Select";
            newChecked.push(data)
        }else{
            newChecked.splice(currentIndex, 1);
        }
        setSelectedContentList(newChecked);
    }

    const handleDropdownItemClick = (data, index, value) => event => {
        event.preventDefault();
        let newArray = [...selectedContentList];
        newArray[index]['unit'] = data;
        setSelectedContentList(newArray);
        document.getElementById("exercise-unit-" + value.contentName).style.display = "none";
    }

    const toggleUnitList = (data) => event => {
        if(document.getElementById("exercise-unit-" + data.contentName).style.display == "none"){
            document.getElementById("exercise-unit-" + data.contentName).style.display = "block";
        }else{
            document.getElementById("exercise-unit-" + data.contentName).style.display = "none";
        }
    }

    const toggleActiveMenu = data => {

        if(data.target.id == "main-exercise-tab"){
            document.getElementById("main-exercise-tab").classList.add("active-background");
            document.getElementById("optional-exercise-tab-1").classList.remove("active-background");
            document.getElementById("optional-exercise-tab-2").classList.remove("active-background");

            setCurrentVideo("https://www.youtube.com/watch?v=iw_MFkAnSGA");
            setCurrentContent("Main Exercise Title");
        }

        if(data.target.id == "optional-exercise-tab-1"){
            document.getElementById("main-exercise-tab").classList.remove("active-background");
            document.getElementById("optional-exercise-tab-1").classList.add("active-background");
            document.getElementById("optional-exercise-tab-2").classList.remove("active-background");

            setCurrentVideo("https://youtu.be/bPOSLc9Opdc");
            setCurrentContent("Optional Exercise Title 1");
        }

        if(data.target.id == "optional-exercise-tab-2"){
            document.getElementById("main-exercise-tab").classList.remove("active-background");
            document.getElementById("optional-exercise-tab-1").classList.remove("active-background");
            document.getElementById("optional-exercise-tab-2").classList.add("active-background");

            setCurrentVideo("https://youtu.be/EY8oryof0bU");
            setCurrentContent("Optional Exercise Title 2");
        }
    }

       
    const vlidateField=(name,value)=>{
    
        if(name=="planner_name"){
            return value.length>1&&value.length<=30
        }

        
    }
    
      const OnBlurFieldChecker=name=>()=>{
        let checker=vlidateField(name,Planner[name]);
        checkPlannerStatus(user._id,token,ItemId,{field:name,value:Planner[name]}).then(data=>{
            if(data.error){
                console.log(data.error);
            }else{
                if(data.found){
                    document.getElementById(name).style.borderColor="#EF5354";
                }else{
                    if(checker){
                        document.getElementById(name).style.borderColor="#02B290";
                     }else{
                        document.getElementById(name).style.borderColor="#EF5354";
                     }
                }
                console.log(data)
            }
        });
         
      }


   

    const GetBranch=()=>{
        getBranch(user._id,token,ItemId).then(branch=>{
            if(branch.error){
                throw "Something went wrong please try again";
            }else{
                return branch;
            }
        }).then(branch=>{
            getGym(user._id,token,branch.gymId).then(gym=>{
                if(gym.error){
                    throw "Something went wrong please try again";
                }else{
                   setBranch({branchName:branch.branchName,branch_active:branch.active,branchId:branch._id,totalmembers:branch.memberList.length,totaladminusers:branch.branchAdminList.length,phone:gym.phone,email:gym.email,gymId:gym._id,gymName:gym.gymName});
                   return branch;
                }
            }).then(branch=>{
                getAllPlanner(user._id,token,branch._id,8,1).then(data=>{
                    if(data.error){
                        throw "Something went wrong please try again";
                    }else{
                        setPlanners(data)
                    }
                })
            }).catch(err=>console.log(err));
        })
    };

    const CreatePlanner=event=>{
        event.preventDefault();
        let bol=window.confirm("Are you sure you want to create new planner");
        if(bol){
            document.body.style.cursor="wait";
            createPlanner(user._id,token,ItemId,{planner_name:"untitled planner"}).then(data=>{
                if(data.error){
                    throw "error creating planner something went wrong";
                }else{
                    return data;
                }
            }).then(data=>{
                setTimeout(()=>{
                     document.body.style.cursor="default";
                     history.push(`/${ItemId}/${data._id}/manage-planner`);
                },1500);
            }).catch(err=>console.log(err))
        }
        event.stopPropagation();
    };


    const DeletePlanner=(plannerId,name)=>e=>{
        e.preventDefault();
        let bol=window.confirm(`Are you sure you want to delete ${name}`);
        if(bol){
            document.body.style.cursor="wait";
            deletePlanner(user._id,token,ItemId,plannerId).then(data=>{
                if(data.error){
                    throw 'Something went wrong please try again'
                }else{
                    getAllPlanner(user._id,token,ItemId,8,1).then(data=>{
                        if(data.error){
                            throw "Something went wrong please try again";
                        }else{
                            setTimeout(()=>{
                                document.body.style.cursor="default";
                                setPlanners(data);
                            },1500);
                        }
                    })
                }
            }).catch(err=>console.log(err));
        }
       e.stopPropagation();
    };




    const hanleDropDown=id=>{
        let dropdown=document.querySelector('#'+id);
        let arrowicon=document.querySelector("#"+id+"-icon");

        if(dropdown.style.display=="none"){
            dropdown.style.display="block";
            arrowicon.style.transform='rotate(0deg)';
        }else {
            dropdown.style.display="none";
            arrowicon.style.transform='rotate(-180deg)';
        }
    }


    const handleDropdownItem=(name,value)=>event=>{
        event.preventDefault();
        setPlanner({...Planner,[name]:value});
        document.getElementById(name+"-list").style.display="none";
        document.getElementById(name+"-list-icon").style.transform='rotate(-180deg)';

    }


    useEffect(()=>{
        GetBranch();
        document.body.style.cursor="default";
    },[])
 
    return(
        <Dashboard  flag={2} data={{
            branchId,
            branchName,
            gymId,
            gymName,
            email,
            totaladminusers,
            totalmembers,
            phone,
            active:branch_active,
            state:props.location.state
          }}>
            <div>
            <div className="row" style={{justifyContent: "space-between"}}>
                <div className="row">
                    <input className="ml-5 pl-4 pr-4 pb-2 pt-2 mb-3 mt-3 shadow-sm" placeholder="Search for names.." style={{outline: "none", borderRadius: 30, width: "60%", border: "none", color: "#757575", backgroundColor: "#e0e0e0"}}/>
                    <span className="material-icons mt-3 ml-3" style={{fontSize: 32}}>sort</span>
                    
                    {/* Create Content Form Open request */}
                    
                        <button onClick={handleOpen} className="mt-1" style={{outline: "none", border: "0px",backgroundColor:"#ffffff"}}>
                          
                                <span className="material-icons shadow" style={{fontSize:32, borderRadius:100, color :"rgb(255, 81, 0)"}}>add_circle</span>
                        
                        </button>
                    
                </div>
                <p className="pt-4 pr-5" style={{fontSize: 16}}>Gym Planner</p>

            </div>



            <div className="pt-3 pl-3 pr-3">
                        {
                            Planners.map((data,index)=>{
                                return(
                                    <div onClick={()=>setcurrentExId(data._id)}  className="shadow mb-2" style={{ backgroundColor:currentExId == data._id?"#f5f5f5":"#ffffff",width: "100%", height: 33, borderRadius: 10}}>
                                        
                                        <div className="row pl-4 pr-4" style={{justifyContent: "space-between"}}>
                                            <Link to={`/${ItemId}/${data._id}/manage-planner`} style={{textDecoration: "none"}}>
                                                <div className="row">
                                                    <p className="pt-1 pl-4" style={{fontSize: 15, color : "#000000"}}> {data.planner_name=="untitled planner"?`${index+1}. untitled planner`:`${index+1}. ${data.planner_name}`}</p>
                                                </div>
                                            </Link>
                                            <div className="row">
                                                <span role="button" onClick={DeletePlanner(data._id,data.planner_name)} className="material-icons pt-1 btn pr-4" style={{color: "#FF6060"}}>delete</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                )
                            })
                        }
                    </div>
           
            </div>






        {/* popup section code */}    
        <div  className={`content-add-section content-add-section-rs-size`} style={{display:isOpen?"block":"none"}}>
            <div className="exerise-header-bar">
                <div style={{display:"flex", alignSelf:"center"}} >
                    <div className="exercise-header-text" style={{marginRight:"6%", alignSelf:"center", whiteSpace:"nowrap"}}>{formtitle}</div>
                   
                </div>
                
                <img  src={Cross} role="button" onClick={handleClose} className="exercise-header-close"/>
            </div>
            

            {
                formrole==2?[
                    <div className="ml-5 mt-4 mr-5 mb-4">
                         <p className="pt-2" style={{fontWeight: "bold"}}>Important Note:
                            <p style={{fontWeight:"lighter", color:"#757575"}}>Branch's & member's under this gym will  <br/>  not be able to access their profile.</p></p>
                          
                            <div className="row mt-2" style={{justifyContent: "flex-end"}}>
                                <button  className="mt-1 mr-3 shadow-sm popup-button">
                                    <p className="pt-1" style={{color: "#000"}}>Yes</p>
                                </button>
                                <button onClick={handleClose} className="mt-1 shadow-sm popup-button">
                                    <p  className="pt-1" style={{color: "#000"}}>No</p>
                                </button>
                            </div>
                    </div>
                ]:[

                    <div style={{transition:'0.5s',overflowY:'hidden'}} className="exercise-body-container">

                    


                        <div id="planner-info-container" className="popcontainer-wrapper">


                        
                        <div   className="popcontainer-sub-wrapper">
                                   <div style={{marginRight:5}} className="input-popup-space">
                                        <input type="text" onChange={_.debounce(OnBlurFieldChecker("planner_name"),300)} id="planner_name" onInput={handleChange("planner_name")} value={planner_name}   style={{width:'100%'}}  className="input-popup" placeholder="Planner Name"/>  
                                    </div>
                                    <div style={{position:'relative'}} className="input-popup-space">

                                        <div onClick={()=>hanleDropDown("level-list")} id="level-wrapper" style={{width:'100%',cursor:'pointer'}} type="text" className="input-popup-flex input-popup">
                                            <div id="level-txt" className="select-exercise-text">{level==""?"Level":level}</div>
                                            <img id="level-list-icon" src={ArrowDown} style={{transition:'0.3s',transform:'rotate(-180deg)'}} className="select-exercise-icon"/>
                                        </div>

                                        <div id="level-list" className="select-exercise-list" style={{display:"none",height:'7.5vw',position:'absolute'}}>
                                                {
                                                    exerciseLevel.map((data,index)=>{
                                                        return (
                                                            <div onClick={handleDropdownItem("level",data)}  role="button"   className="exercise-list-container">
                                                                <div className="exercise-list">
                                                                {index+1}. {data}
                                                                </div>
                                                            </div>
                                                        )
                                                    })
                                                }
                                        </div>
                                    
                                    </div>

                                    
                                    
                                    
                                </div>
            
                                <div style={{fontSize:"1.02vw",textAlign:'center',paddingInline:'10%'}}>The planner name shoud ne unique & level should be selected</div>
                                <div style={{marginBottom:'2%'}} className="register-button">
                                    <div>Create</div>
                                </div>

                        </div>



                    </div>
            
                ]
            }


        </div>



        </Dashboard>
    )
}

export default PlannerDashBoard;